"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ XIO MVP Day 1
"""

import asyncio
import json
import logging
from datetime import datetime
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    from app.main import app
    from app.orchestrator.manager import XIOOrchestrator
    from app.ws.broker import connection_manager, event_broker
    from app.config.settings import get_settings
    logger.info("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    raise


class Day1IntegrationTest:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –î–Ω—è 1"""
    
    def __init__(self):
        self.orchestrator = XIOOrchestrator()
        self.test_results = {}
        
    async def test_1_config_loading(self) -> bool:
        """–¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        logger.info("üß™ –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        try:
            settings = get_settings()
            required_settings = [
                'APP_NAME', 'DEBUG', 'HOST', 'PORT',
                'DATABASE_URL', 'REDIS_URL', 'OPENAI_API_KEY'
            ]
            
            for setting in required_settings:
                if not hasattr(settings, setting):
                    logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {setting}")
                    return False
            
            logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: APP_NAME={settings.APP_NAME}")
            self.test_results['config_loading'] = True
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            self.test_results['config_loading'] = False
            return False
    
    async def test_2_orchestrator_initialization(self) -> bool:
        """–¢–µ—Å—Ç 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        logger.info("üß™ –¢–µ—Å—Ç 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        
        try:
            await self.orchestrator.initialize()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
            status = self.orchestrator.get_status()
            expected_keys = ['is_running', 'current_run_id', 'agents_count', 'has_team']
            
            for key in expected_keys:
                if key not in status:
                    logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á —Å—Ç–∞—Ç—É—Å–∞: {key}")
                    return False
            
            logger.info(f"‚úÖ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {status}")
            self.test_results['orchestrator_init'] = True
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            self.test_results['orchestrator_init'] = False
            return False
    
    async def test_3_websocket_broker(self) -> bool:
        """–¢–µ—Å—Ç 3: WebSocket –±—Ä–æ–∫–µ—Ä —Å–æ–±—ã—Ç–∏–π"""
        logger.info("üß™ –¢–µ—Å—Ç 3: WebSocket –±—Ä–æ–∫–µ—Ä —Å–æ–±—ã—Ç–∏–π...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–æ–∫–µ—Ä –≤—Ä—É—á–Ω—É—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if not event_broker._is_processing:
                await event_broker.start_processing()
                logger.info("‚úÖ –ë—Ä–æ–∫–µ—Ä —Å–æ–±—ã—Ç–∏–π –∑–∞–ø—É—â–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
            test_event = {
                "type": "agent_message",
                "meeting_id": "test_meeting_123",
                "agent_id": "test_agent",
                "content": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                "timestamp": datetime.now().isoformat()
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –±—Ä–æ–∫–µ—Ä
            await event_broker.emit_event(test_event)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—Ä–æ–∫–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è
            if not event_broker._is_processing:
                logger.error("‚ùå –ë—Ä–æ–∫–µ—Ä —Å–æ–±—ã—Ç–∏–π –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                return False
            
            logger.info("‚úÖ WebSocket –±—Ä–æ–∫–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            self.test_results['websocket_broker'] = True
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket –±—Ä–æ–∫–µ—Ä–∞: {e}")
            self.test_results['websocket_broker'] = False
            return False
    
    async def test_4_orchestrator_lifecycle(self) -> bool:
        """–¢–µ—Å—Ç 4: –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        logger.info("üß™ –¢–µ—Å—Ç 4: –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ run
            run_id = await self.orchestrator.start_run(
                meeting_id="test_meeting_456",
                topic="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"
            )
            
            if not run_id:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å run_id")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            status = self.orchestrator.get_status()
            if not status['is_running']:
                logger.error("‚ùå Run –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—É–∑—É
            pause_result = await self.orchestrator.pause_run()
            if not pause_result:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É")
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            resume_result = await self.orchestrator.resume_run()
            if not resume_result:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å")
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É
            stop_result = await self.orchestrator.stop_run()
            if not stop_result:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
                return False
            
            logger.info(f"‚úÖ –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {run_id}")
            self.test_results['orchestrator_lifecycle'] = True
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            self.test_results['orchestrator_lifecycle'] = False
            return False
    
    async def test_5_notion_schemas(self) -> bool:
        """–¢–µ—Å—Ç 5: –í–∞–ª–∏–¥–∞—Ü–∏—è JSON —Å—Ö–µ–º Notion"""
        logger.info("üß™ –¢–µ—Å—Ç 5: –í–∞–ª–∏–¥–∞—Ü–∏—è JSON —Å—Ö–µ–º Notion...")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ö–µ–º—ã
            with open('app/tools/schemas/notion.decision_log.json', 'r', encoding='utf-8') as f:
                decision_log_schema = json.load(f)
            
            with open('app/tools/schemas/notion.task.json', 'r', encoding='utf-8') as f:
                task_schema = json.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            required_decision_fields = ['definition_id', 'name', 'description', 'json_schema']
            required_task_fields = ['definition_id', 'name', 'description', 'json_schema']
            
            for field in required_decision_fields:
                if field not in decision_log_schema:
                    logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ –≤ decision_log: {field}")
                    return False
            
            for field in required_task_fields:
                if field not in task_schema:
                    logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ –≤ task: {field}")
                    return False
            
            logger.info("‚úÖ JSON —Å—Ö–µ–º—ã Notion –≤–∞–ª–∏–¥–Ω—ã")
            self.test_results['notion_schemas'] = True
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ö–µ–º Notion: {e}")
            self.test_results['notion_schemas'] = False
            return False
    
    async def test_6_fastapi_app(self) -> bool:
        """–¢–µ—Å—Ç 6: FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        logger.info("üß™ –¢–µ—Å—Ç 6: FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ
            if not app:
                logger.error("‚ùå FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ—É—Ç–µ—Ä—ã
            routes = [route.path for route in app.routes if hasattr(route, 'path')]
            expected_routes = [
                '/api/v1/health',
                '/api/v1/meetings',
                '/api/v1/teams',
                '/api/v1/tools/available',  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
                '/api/v1/meetings/{meeting_id}/messages',  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
                '/api/v1/meetings/{meeting_id}/participants',  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
                '/api/v1/meetings/{meeting_id}/artifacts'  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
            ]
            
            for route in expected_routes:
                if route not in routes:
                    logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–æ—É—Ç: {route}")
                    return False
            
            logger.info(f"‚úÖ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å {len(routes)} —Ä–æ—É—Ç–∞–º–∏")
            self.test_results['fastapi_app'] = True
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            self.test_results['fastapi_app'] = False
            return False
    
    async def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ XIO MVP Day 1...")
        
        tests = [
            self.test_1_config_loading,
            self.test_2_orchestrator_initialization,
            self.test_3_websocket_broker,
            self.test_4_orchestrator_lifecycle,
            self.test_5_notion_schemas,
            self.test_6_fastapi_app
        ]
        
        results = {}
        for test in tests:
            try:
                result = await test()
                results[test.__name__] = result
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
                results[test.__name__] = False
        
        return results
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        logger.info("\n" + "="*60)
        logger.info("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ –î–ù–Ø 1")
        logger.info("="*60)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results.values() if result)
        failed_tests = total_tests - passed_tests
        
        logger.info(f"üìà –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed_tests}")
        logger.info(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
        logger.info(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed_tests/total_tests)*100:.1f}%")
        
        logger.info("\nüîç –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for test_name, result in self.test_results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            logger.info(f"  {test_name}: {status}")
        
        if failed_tests == 0:
            logger.info("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –î–µ–Ω—å 1 –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤!")
        else:
            logger.info(f"\n‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {failed_tests} —Ç–µ—Å—Ç–æ–≤")
        
        logger.info("="*60)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = Day1IntegrationTest()
    
    try:
        results = await tester.run_all_tests()
        tester.test_results = results
        tester.print_summary()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        failed_count = sum(1 for result in results.values() if not result)
        exit_code = 0 if failed_count == 0 else 1
        return exit_code
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    exit(exit_code) 