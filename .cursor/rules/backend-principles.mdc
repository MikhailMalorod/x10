---
description: 
globs: 
alwaysApply: false
---
---
description: Основные правила и паттерны для бэкенда на FastAPI, SQLAlchemy и AG2.
globs:
  - "backend/**/*.py"
alwaysApply: false
---

# FastAPI & Pydantic
- Все эндпоинты должны быть асинхронными (`async def`).
- Используй Dependency Injection (`Depends`) для доступа к сервисам и сессиям БД.
- Сервисы должны быть **stateless**. Все состояние хранится в БД или Redis.
- Для всех API используй Pydantic-схемы для валидации запросов и форматирования ответов. Модели SQLAlchemy не должны "протекать" в API.

# SQLAlchemy & Alembic
- Для связи с пользователем-владельцем ресурса используй `owner_id` и `owner`, а не `user_id`.
- Все запросы к БД должны выполняться через асинхронную сессию.
- Миграции Alembic должны быть атомарными и содержать как `upgrade`, так и `downgrade` функции.

# AutoGen (AG2)
- Основной паттерн для совещаний — `GroupChat` с `GroupChatManager` в роли оркестратора.
- `UserProxyAgent` — это системный агент. Он отвечает за выполнение кода (в Docker) и взаимодействие с человеком (HITL). Он не должен генерировать текст с помощью LLM.
- Инструменты (`Tools`) должны регистрироваться через `register_function`. Внедрение секретных данных (API-ключей) происходит на стороне `UserProxyAgent` в момент исполнения, они никогда не передаются в LLM.

