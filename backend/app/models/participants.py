"""
–ú–æ–¥–µ–ª–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–Ω—Å–∏–ª–∏—É–º–∞
"""

from enum import Enum
from typing import List, Optional, Dict, Any
from pydantic import BaseModel, Field

class ParticipantRole(str, Enum):
    """–†–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–æ–Ω—Å–∏–ª–∏—É–º–µ"""
    MODERATOR = "moderator"  # –í–µ–¥—É—â–∏–π –∫–æ–Ω—Å–∏–ª–∏—É–º–∞
    EXPERT = "expert"  # –≠–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
    SCRIBE = "scribe"  # –•—Ä–æ–Ω–∏—Å—Ç –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ä–µ—à–µ–Ω–∏–π
    INTEGRATOR = "integrator"  # –ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
    USER = "user"  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å

class ParticipantStatus(str, Enum):
    """–°—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–æ–Ω—Å–∏–ª–∏—É–º–µ"""
    SPEAKING = "speaking"  # –°–µ–π—á–∞—Å –≥–æ–≤–æ—Ä–∏—Ç
    NEXT = "next"  # –°–ª–µ–¥—É—é—â–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏
    WAITING = "waiting"  # –û–∂–∏–¥–∞–µ—Ç —Å–≤–æ–µ–π –æ—á–µ—Ä–µ–¥–∏
    BUSY = "busy"  # –ó–∞–Ω—è—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç)
    INACTIVE = "inactive"  # –ù–µ–∞–∫—Ç–∏–≤–µ–Ω

class ToolBadge(BaseModel):
    """–ó–Ω–∞—á–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    tool_id: str = Field(..., description="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")
    name: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")
    icon: Optional[str] = Field(None, description="–ò–∫–æ–Ω–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")
    description: Optional[str] = Field(None, description="–û–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")

class Participant(BaseModel):
    """–£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–Ω—Å–∏–ª–∏—É–º–∞"""
    agent_id: str = Field(..., description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–∞")
    meeting_id: str = Field(..., description="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤—Å—Ç—Ä–µ—á–∏")
    role: ParticipantRole = Field(..., description="–†–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞")
    name: str = Field(..., description="–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è")
    status: ParticipantStatus = Field(default=ParticipantStatus.WAITING, description="–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å")
    model: Optional[str] = Field(None, description="–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å (–¥–ª—è LLM)")
    tool_badges: List[ToolBadge] = Field(default_factory=list, description="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
    metadata: Dict[str, Any] = Field(default_factory=dict, description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")

    class Config:
        json_schema_extra = {
            "example": {
                "agent_id": "moderator_1",
                "meeting_id": "meet_123",
                "role": "moderator",
                "name": "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
                "status": "speaking",
                "model": "gpt-4",
                "tool_badges": [
                    {
                        "tool_id": "notion.decision_log",
                        "name": "Notion Decision Log",
                        "icon": "üìù",
                        "description": "–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ä–µ—à–µ–Ω–∏–µ–º"
                    }
                ],
                "metadata": {
                    "speaking_order": 1,
                    "specialization": "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞"
                }
            }
        }

class ParticipantUpdate(BaseModel):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    status: ParticipantStatus = Field(..., description="–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å")
    metadata: Optional[Dict[str, Any]] = Field(None, description="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")

class SpeakingOrder(BaseModel):
    """–ü–æ—Ä—è–¥–æ–∫ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    meeting_id: str = Field(..., description="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤—Å—Ç—Ä–µ—á–∏")
    current_speaker: Optional[str] = Field(None, description="ID —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏–∫–µ—Ä–∞")
    next_speaker: Optional[str] = Field(None, description="ID —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ø–∏–∫–µ—Ä–∞")
    order: List[str] = Field(..., description="–ü–æ—Ä—è–¥–æ–∫ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è (—Å–ø–∏—Å–æ–∫ agent_id)")
    round: int = Field(default=1, description="–¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥ –æ–±—Å—É–∂–¥–µ–Ω–∏—è")

    class Config:
        json_schema_extra = {
            "example": {
                "meeting_id": "meet_123",
                "current_speaker": "moderator_1",
                "next_speaker": "expert_1",
                "order": ["moderator_1", "expert_1", "expert_2", "scribe_1"],
                "round": 1
            }
        } 